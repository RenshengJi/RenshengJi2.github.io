{
    "version": "https://jsonfeed.org/version/1",
    "title": "人生几何 • All posts by \"armor_detect\" category",
    "description": "",
    "home_page_url": "https://RenshengJi.github.io",
    "items": [
        {
            "id": "https://renshengji.github.io/2023/04/24/rm-1/",
            "url": "https://renshengji.github.io/2023/04/24/rm-1/",
            "title": "中心投影！",
            "date_published": "2023-04-24T06:28:13.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p>由于工业相机所拍摄图片实际上是三维空间-&gt;二维成像平面的<strong>中心投影</strong>而不是平心投影，故原有的很多<strong>先验条件</strong>（灯条识别与灯条匹配）是不成立的。</p>\n<p>以下为失效的先验条件：</p>\n<ul>\n<li>判断两个灯条的相对位置，源码如下：</li>\n</ul>\n<div class=\"highlight-container\" data-rel=\"C++\"><figure class=\"iseeu highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*  该指标的含义为：</span></span><br><span class=\"line\"><span class=\"comment\"> * \t1. 先将两个灯条的中心点垂直映射到 两个灯条的平均方向上的直线上</span></span><br><span class=\"line\"><span class=\"comment\"> * \t2. 然后计算两个灯条的中心点在这条直线上的投影距离</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">float</span> <span class=\"title\">Offset</span><span class=\"params\">(<span class=\"type\">const</span> Light&amp; x, <span class=\"type\">const</span> Light&amp; y)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">float</span> angle = <span class=\"built_in\">Verticality</span>(x, y) * CV_PI / <span class=\"number\">180.0</span>;</span><br><span class=\"line\">\t<span class=\"comment\">/* 灯条中心偏移向量 */</span></span><br><span class=\"line\">\t<span class=\"type\">float</span> dx = y.rect.center.x - x.rect.center.x;</span><br><span class=\"line\">\t<span class=\"type\">float</span> dy = y.rect.center.y - x.rect.center.y;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">abs</span>(<span class=\"built_in\">cos</span>(angle) * <span class=\"built_in\">abs</span>(dx) - <span class=\"built_in\">sin</span>(angle) * <span class=\"built_in\">abs</span>(dy));</span><br><span class=\"line\">\t<span class=\"comment\">// return abs(cos(angle) * dx - sin(angle) * dy);</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p><strong>失效原因</strong>：虽然说在实际的三维立体世界中，上述条件是肯定有效的，但是，我们是在二维成像平面中去判断的，即使从三维空间-&gt;二维成像平面的过程是平行投影，这个条件也不成立，更何况是中心投影了！</p>\n<p><strong>失效后果</strong>：本来这个先验条件的设置应该是为了过滤掉如下图所示的情况，实际情况可能也还好，但是这样的话，由于这个先验条件本来就是错误的，它并不能正确有效的反映出二维平面投影下装甲板的真实特征，所以有一些正确的灯条匹配会因为这个<strong>错误的先验条件</strong>而被过滤！！</p>\n<p><img src=\"/images/IMG_3941.jpg\" alt=\"Test\"></p>\n<p><strong>解决方案</strong>：</p>\n<p>a) 直接使用类似上交的四点模型，进行纯深度学习识别，完全抛弃传统视觉，直接避开这个问题？</p>\n<p>b) 读君神的代码（因为现在已知君神的代码是使用的纯传统视觉），或者说直接询问，看看他是这么解决的！</p>\n<p>c) 继续使用现有方案，但是要将阈值调到一个合适的值（能过滤掉大部分假装甲板，又不至于将大量的真装甲板过滤掉！）</p>\n<p>d) 训练一个良好的神经网络，其输出能够大致保证框且仅框出一个装甲板，这样的话我们发现就不需要保留这个先验条件了（因为这个先验条件所解决的问题已经不会出现了，所以这个先验条件也可以随之消失了！！）</p>\n",
            "tags": [
                "rm"
            ]
        }
    ]
}